package cuoi_ky;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class giao_dien extends javax.swing.JFrame {

    private ArrayList<KhamBenh> danhSachBenhNhanBanDau;
    private DefaultTableModel tableModel;
    
    /**
     * Creates new form giao_dien
     */
    public giao_dien() {
        initComponents();
        danhSachBenhNhanBanDau = new ArrayList<>();
        tableModel = new DefaultTableModel();
        table.setModel(tableModel);
        
        tableModel.setColumnIdentifiers(new Object[]{"STT", "Họ và Tên", "Ngày sinh","Giới tinh", "Địa chỉ", "Số điện thoại", "Mã số BHYT", "Tên bệnh", "Triệu chứng", "Thuốc điều trị", "Viện phí", "Thời gian khám", "Bác sĩ"});
        loadDataFromFile(); // Tải dữ liệu đã tồn tại từ tập tin
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblQuanLy = new javax.swing.JLabel();
        lblTen = new javax.swing.JLabel();
        lblNgaySinh = new javax.swing.JLabel();
        lblGioiTinh = new javax.swing.JLabel();
        lblDiaChi = new javax.swing.JLabel();
        lblSoDienThoai = new javax.swing.JLabel();
        lblMaSoBHYT = new javax.swing.JLabel();
        lblTenBenh = new javax.swing.JLabel();
        lblTrieuChung = new javax.swing.JLabel();
        lblThuocDieuTri = new javax.swing.JLabel();
        lblVienPhi = new javax.swing.JLabel();
        lblNgayKham = new javax.swing.JLabel();
        lblBacSi = new javax.swing.JLabel();
        txtTrieuChung = new javax.swing.JTextField();
        txtVienPhi = new javax.swing.JTextField();
        txtTen = new javax.swing.JTextField();
        txtThuocDieuTri = new javax.swing.JTextField();
        txtDiaChi = new javax.swing.JTextField();
        txtSoDienThoai = new javax.swing.JTextField();
        txtMaSoBHYT = new javax.swing.JTextField();
        txtBacSi = new javax.swing.JTextField();
        txtTenBenh = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        btnXoa = new javax.swing.JButton();
        cboGioiTinh = new javax.swing.JComboBox<>();
        btnLuu = new javax.swing.JButton();
        btnHuy = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        lblTim = new javax.swing.JLabel();
        cboTim = new javax.swing.JComboBox<>();
        txtTim = new javax.swing.JTextField();
        btnTim = new javax.swing.JButton();
        jDateNgaySinh = new com.toedter.calendar.JDateChooser();
        jDateNgayKham = new com.toedter.calendar.JDateChooser();
        btnDangXuat = new javax.swing.JButton();
        btnThoat = new javax.swing.JButton();
        lblSapXep = new javax.swing.JLabel();
        cboSapXep = new javax.swing.JComboBox<>();
        btnSapXep = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 255, 153));

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        lblQuanLy.setFont(new java.awt.Font("Times New Roman", 1, 28)); // NOI18N
        lblQuanLy.setText("QUẢN LÝ BỆNH NHÂN");

        lblTen.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblTen.setText("Họ và tên:");

        lblNgaySinh.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblNgaySinh.setText("Ngày sinh:");

        lblGioiTinh.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblGioiTinh.setText("Giới tính:");

        lblDiaChi.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblDiaChi.setText("Địa chỉ:");

        lblSoDienThoai.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblSoDienThoai.setText("Số điện thoại:");

        lblMaSoBHYT.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblMaSoBHYT.setText("Mã số BHYT:");

        lblTenBenh.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblTenBenh.setText("Tên Bệnh:");

        lblTrieuChung.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblTrieuChung.setText("Triệu Chứng:");

        lblThuocDieuTri.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblThuocDieuTri.setText("Thuốc Điều Trị:");

        lblVienPhi.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblVienPhi.setText("Viện Phí:");

        lblNgayKham.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblNgayKham.setText("Ngày Khám:");

        lblBacSi.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblBacSi.setText("Bác Sĩ:");

        txtTrieuChung.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        txtVienPhi.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        txtTen.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        txtThuocDieuTri.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        txtDiaChi.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        txtSoDienThoai.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        txtMaSoBHYT.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        txtBacSi.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        txtTenBenh.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        table.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "STT", "Họ và Tên", "Ngày sinh", "Địa chỉ", "Số điện thoại", "Mã số BHYT", "Tên bệnh", "Triệu chứng", "Thuốc điều trị", "Viện phí", "Thời gian khám", "Bác sĩ"
            }
        ));
        jScrollPane1.setViewportView(table);

        btnXoa.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N
        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        cboGioiTinh.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nam", "Nữ", "Khác" }));

        btnLuu.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N
        btnLuu.setText("Lưu");
        btnLuu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLuuActionPerformed(evt);
            }
        });

        btnHuy.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N
        btnHuy.setText("Hủy");
        btnHuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHuyActionPerformed(evt);
            }
        });

        btnSua.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N
        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        lblTim.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N
        lblTim.setText("Tìm kiếm theo:");

        cboTim.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N
        cboTim.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Họ và Tên", "Số điện thoại", "Mã BHYT" }));

        txtTim.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N

        btnTim.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N
        btnTim.setText("Tìm");
        btnTim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimActionPerformed(evt);
            }
        });

        btnDangXuat.setBackground(new java.awt.Color(255, 153, 153));
        btnDangXuat.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnDangXuat.setText("Đăng xuất");
        btnDangXuat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDangXuatActionPerformed(evt);
            }
        });

        btnThoat.setBackground(new java.awt.Color(255, 51, 51));
        btnThoat.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnThoat.setText("Thoát");
        btnThoat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThoatActionPerformed(evt);
            }
        });

        lblSapXep.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N
        lblSapXep.setText("Sắp xếp theo:");

        cboSapXep.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N
        cboSapXep.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Họ và Tên", "Viện phí", "Thời gian khám" }));

        btnSapXep.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N
        btnSapXep.setText("Sắp xếp");
        btnSapXep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSapXepActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblQuanLy)
                .addGap(291, 291, 291))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblBacSi)
                    .addComponent(lblMaSoBHYT)
                    .addComponent(lblTen)
                    .addComponent(lblNgaySinh)
                    .addComponent(lblSoDienThoai)
                    .addComponent(lblDiaChi)
                    .addComponent(lblGioiTinh)
                    .addComponent(lblTenBenh)
                    .addComponent(lblTrieuChung)
                    .addComponent(lblThuocDieuTri)
                    .addComponent(lblVienPhi)
                    .addComponent(lblNgayKham))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtThuocDieuTri, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTrieuChung, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTenBenh, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtMaSoBHYT, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSoDienThoai, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDiaChi, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cboGioiTinh, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jDateNgaySinh, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                            .addComponent(txtTen, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtVienPhi))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 890, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                                .addComponent(lblSapXep)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(cboSapXep, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                                .addComponent(lblTim)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cboTim, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(txtTim, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnTim)
                                                .addGap(48, 48, 48)
                                                .addComponent(btnHuy))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(30, 30, 30)
                                                .addComponent(btnSapXep)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 135, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnThoat, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnDangXuat))
                                        .addGap(82, 82, 82))
                                    .addComponent(btnLuu)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jDateNgayKham, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                            .addComponent(txtBacSi))
                        .addGap(186, 186, 186)
                        .addComponent(btnSua)
                        .addGap(78, 78, 78)
                        .addComponent(btnXoa)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblQuanLy, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnLuu)
                            .addComponent(btnSua)
                            .addComponent(btnXoa))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblSapXep)
                                    .addComponent(cboSapXep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnSapXep))
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDangXuat)
                                .addGap(7, 7, 7)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnHuy)
                            .addComponent(lblTim)
                            .addComponent(cboTim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTim)
                            .addComponent(btnThoat)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTen)
                            .addComponent(txtTen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNgaySinh)
                            .addComponent(jDateNgaySinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblGioiTinh)
                            .addComponent(cboGioiTinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDiaChi)
                            .addComponent(txtDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSoDienThoai)
                            .addComponent(txtSoDienThoai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMaSoBHYT)
                            .addComponent(txtMaSoBHYT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTenBenh)
                            .addComponent(txtTenBenh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTrieuChung)
                            .addComponent(txtTrieuChung, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblThuocDieuTri)
                            .addComponent(txtThuocDieuTri, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblVienPhi)
                            .addComponent(txtVienPhi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNgayKham)
                            .addComponent(jDateNgayKham, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBacSi)
                            .addComponent(txtBacSi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(70, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 64, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) {
            tableModel.removeRow(selectedRow);
            danhSachBenhNhanBanDau.remove(selectedRow);
            
            updateTableModel(); 
            saveDataToFile();
            
            JOptionPane.showMessageDialog(giao_dien.this, "Xóa thông tin thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(giao_dien.this, "Vui lòng chọn một bệnh nhân để xóa!.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnXoaActionPerformed

    private void updateTableModel() {
        // Xóa dữ liệu cũ
        while (tableModel.getRowCount() > 0) {
            tableModel.removeRow(0);
        }

        // Thêm dữ liệu mới từ danhSachBenhNhan vào bảng
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        for (int i = 0; i < danhSachBenhNhanBanDau.size(); i++) {
            KhamBenh khambenh = danhSachBenhNhanBanDau.get(i);
            Object[] rowData = {
                i + 1,
                khambenh.getTen(),
                dateFormat.format(khambenh.getNgaySinh()),
                khambenh.getGioiTinh(),
                khambenh.getDiaChi(),
                khambenh.getSoDienThoai(),
                khambenh.getMaSoBHYT(),
                khambenh.getTenBenh(),
                khambenh.getTrieuChung(),
                khambenh.getThuocDieuTri(),
                khambenh.getVienPhi(),
                dateFormat.format(khambenh.getNgayKham()),
                khambenh.getBacSi()
            };
            tableModel.addRow(rowData);
        }
    }
    
    private void btnLuuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLuuActionPerformed
        String ten = txtTen.getText();
        java.util.Date ngaySinhDate = jDateNgaySinh.getDate();
        String gioiTinh = cboGioiTinh.getSelectedItem().toString();
        String diaChi = txtDiaChi.getText();
        String soDienThoai = txtSoDienThoai.getText();
        String maSoBHYT = txtMaSoBHYT.getText();
        String tenBenh = txtTenBenh.getText();
        String trieuChung = txtTrieuChung.getText();
        String thuocDieuTri = txtThuocDieuTri.getText();
        String vienPhi = txtVienPhi.getText();
        java.util.Date ngayKhamDate = jDateNgayKham.getDate();
        String bacSi = txtBacSi.getText();
        
        // Kiểm tra dữ liệu có đầy đủ không
        if (ten.isEmpty() || ngaySinhDate == null || diaChi.isEmpty() || soDienThoai.isEmpty() || maSoBHYT.isEmpty() ||
            tenBenh.isEmpty() || trieuChung.isEmpty() || thuocDieuTri.isEmpty() || vienPhi.isEmpty() ||
            ngayKhamDate == null || bacSi.isEmpty()) {
            // Hiển thị thông báo lỗi
            JOptionPane.showMessageDialog(this, "Vui lòng điền đầy đủ thông tin.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return; // Không thực hiện lưu nếu dữ liệu không đầy đủ
        }

        // Kiểm tra xem có bệnh nhân được chọn để sửa không
        int selectedRowIndex = table.getSelectedRow();
        if (selectedRowIndex == -1) {
            // Nếu không có bệnh nhân được chọn, thêm mới
            KhamBenh khambenh = new KhamBenh(ten, ngaySinhDate, gioiTinh, diaChi, soDienThoai, maSoBHYT, tenBenh, trieuChung, thuocDieuTri, Double.parseDouble(vienPhi), ngayKhamDate, bacSi);
            danhSachBenhNhanBanDau.add(khambenh);
        } else {
            // Nếu có bệnh nhân được chọn, cập nhật thông tin
            KhamBenh selectedPatient = danhSachBenhNhanBanDau.get(selectedRowIndex);
            selectedPatient.setTen(ten);
            selectedPatient.setNgaySinh(ngaySinhDate);
            selectedPatient.setGioiTinh(gioiTinh);
            selectedPatient.setDiaChi(diaChi);
            selectedPatient.setSoDienThoai(soDienThoai);
            selectedPatient.setMaSoBHYT(maSoBHYT);
            selectedPatient.setTenBenh(tenBenh);
            selectedPatient.setTrieuChung(trieuChung);
            selectedPatient.setThuocDieuTri(thuocDieuTri);
            selectedPatient.setVienPhi(Double.parseDouble(vienPhi));
            selectedPatient.setNgayKham(ngayKhamDate);
            selectedPatient.setBacsi(bacSi);
        }
        
        // Cập nhật bảng
        updateTableModel();
        
        // Lưu dữ liệu vào tập tin
        saveDataToFile();
        
        // Thông báo lưu thành công
        JOptionPane.showMessageDialog(this, "Lưu thành công.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        
        // Xóa nội dung các trường nhập liệu
        txtTen.setText("");
        jDateNgaySinh.setDate(null);
        cboGioiTinh.setSelectedIndex(0);
        txtDiaChi.setText("");
        txtSoDienThoai.setText("");
        txtMaSoBHYT.setText("");
        txtTenBenh.setText("");
        txtTrieuChung.setText("");
        txtThuocDieuTri.setText("");
        txtVienPhi.setText("");
        jDateNgayKham.setDate(null);
        txtBacSi.setText("");                 
    }//GEN-LAST:event_btnLuuActionPerformed
    
    private void saveDataToFile() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("C:\\Users\\nhatv\\OneDrive\\Documents\\NetBeansProjects\\Cuoi_ky\\src\\cuoi_ky\\data.bin"))) {
            oos.writeObject(danhSachBenhNhanBanDau);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void loadDataFromFile() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("C:\\Users\\nhatv\\OneDrive\\Documents\\NetBeansProjects\\Cuoi_ky\\src\\cuoi_ky\\data.bin"))) {
            danhSachBenhNhanBanDau = (ArrayList<KhamBenh>) ois.readObject();
            updateTableModel(); // Cập nhật mô hình bảng sau khi tải dữ liệu
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Tập tin không tồn tại.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
    } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
 
    private void btnHuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHuyActionPerformed
        // Đặt lại trạng thái của bảng với toàn bộ danh sách bệnh nhân
        updateTableModelWithSearchResult(danhSachBenhNhanBanDau);

        // Đặt lại trạng thái của combo box và text field
        cboTim.setSelectedIndex(0); // Chọn lại mục đầu tiên trong combo box
        txtTim.setText(""); // Xóa nội dung trong text field
    }//GEN-LAST:event_btnHuyActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        int selectedRowIndex = table.getSelectedRow();
        
        // Kiểm tra xem có bệnh nhân được chọn không
        if (selectedRowIndex == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một bệnh nhân để sửa.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        // Lấy thông tin của bệnh nhân được chọn
        KhamBenh selectedPatient = danhSachBenhNhanBanDau.get(selectedRowIndex);
        
        // Đưa thông tin vào các trường nhập liệu
        txtTen.setText(selectedPatient.getTen());
        jDateNgaySinh.setDate(selectedPatient.getNgaySinh());
        cboGioiTinh.setSelectedItem(selectedPatient.getGioiTinh());
        txtDiaChi.setText(selectedPatient.getDiaChi());
        txtSoDienThoai.setText(selectedPatient.getSoDienThoai());
        txtMaSoBHYT.setText(selectedPatient.getMaSoBHYT());
        txtTenBenh.setText(selectedPatient.getTenBenh());
        txtTrieuChung.setText(selectedPatient.getTrieuChung());
        txtThuocDieuTri.setText(selectedPatient.getThuocDieuTri());
        txtVienPhi.setText(String.valueOf(selectedPatient.getVienPhi()));
        jDateNgayKham.setDate(selectedPatient.getNgayKham());
        txtBacSi.setText(selectedPatient.getBacSi());
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnTimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimActionPerformed
        // Lấy yếu tố tìm kiếm và từ khóa từ combo box và text field
        String selectedSearchFactor = cboTim.getSelectedItem().toString();
        String keyword = txtTim.getText();

        // Nếu danh sách ban đầu rỗng (chưa lưu), thì lưu lại
        if (danhSachBenhNhanBanDau.isEmpty()) {
            danhSachBenhNhanBanDau = new ArrayList<>(danhSachBenhNhanBanDau);
        }

        // Thực hiện tìm kiếm
        ArrayList<KhamBenh> ketQuaTimKiem = timKiemBenhNhan(selectedSearchFactor, keyword);

        // Cập nhật bảng với kết quả tìm kiếm
        
        updateTableModelWithSearchResult(ketQuaTimKiem);
    }//GEN-LAST:event_btnTimActionPerformed

    private void btnThoatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThoatActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnThoatActionPerformed

    private void btnDangXuatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDangXuatActionPerformed
        dispose(); // Đóng giao diện quản lý
        dang_nhap dn = new dang_nhap();
        dn.setVisible(true); // Hiển thị giao diện đăng nhập
    }//GEN-LAST:event_btnDangXuatActionPerformed

    private void btnSapXepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSapXepActionPerformed
        // Lấy yếu tố sắp xếp từ combo box
        String selectedSortFactor = cboSapXep.getSelectedItem().toString();

        // Sắp xếp danh sách ban đầu
        Collections.sort(danhSachBenhNhanBanDau, new Comparator<KhamBenh>() {
            public int compare(KhamBenh benhNhan1, KhamBenh benhNhan2) {
                switch (selectedSortFactor) {
                    case "Họ và Tên":
                        return compareHoTen(benhNhan1.getTen(), benhNhan2.getTen());
                    case "Viện phí":
                        return Double.compare(benhNhan1.getVienPhi(), benhNhan2.getVienPhi());
                    case "Thời gian khám":
                        return benhNhan1.getNgayKham().compareTo(benhNhan2.getNgayKham());
                    default:
                        return 0;
                }
            }
            
            private int compareHoTen(String hoTen1, String hoTen2) {
                // Tách chuỗi Họ và Tên thành mảng các từ
                String[] parts1 = hoTen1.split("\\s+");
                String[] parts2 = hoTen2.split("\\s+");

                // Lấy tên cuối cùng (tên) của mỗi chuỗi
                String ten1 = parts1[parts1.length - 1];
                String ten2 = parts2[parts2.length - 1];

                // So sánh tên
                int result = ten1.compareToIgnoreCase(ten2);

                // Nếu tên giống nhau, thì so sánh tên đệm
                if (result == 0) {
                    // Lấy tên đệm (nếu có)
                    String dem1 = hoTen1.substring(0, hoTen1.lastIndexOf(ten1)).trim();
                    String dem2 = hoTen2.substring(0, hoTen2.lastIndexOf(ten2)).trim();

                    // So sánh tên đệm
                    result = dem1.compareToIgnoreCase(dem2);
                }

                // Nếu tên và tên đệm giống nhau, thì so sánh họ
                if (result == 0) {
                    // Lấy họ (nếu có)
                    String ho1 = (parts1.length > 2) ? parts1[0] : "";
                    String ho2 = (parts2.length > 2) ? parts2[0] : "";

                    // So sánh họ
                    result = ho1.compareToIgnoreCase(ho2);
                }

                return result;
            }
        });

        // Cập nhật bảng với danh sách đã sắp xếp
        updateTableModelWithSearchResult(new ArrayList<>(danhSachBenhNhanBanDau));
    }//GEN-LAST:event_btnSapXepActionPerformed

    // Thêm phương thức để thực hiện tìm kiếm và cập nhật bảng
    private ArrayList<KhamBenh> timKiemBenhNhan(String searchFactor, String keyword) {
        ArrayList<KhamBenh> ketQuaTimKiem = new ArrayList<>();
    
        for (KhamBenh benhNhan : danhSachBenhNhanBanDau) {
            String valueToCompare = "";
            switch (searchFactor) {
                case "Họ và Tên":
                    valueToCompare = benhNhan.getTen();
                    break;
                case "Số điện thoại":
                    valueToCompare = benhNhan.getSoDienThoai();
                    break;
                case "Mã BHYT":
                    valueToCompare = benhNhan.getMaSoBHYT();
                    break;
            }

            // Nếu giá trị tìm kiếm khớp với giá trị trong bảng, thêm vào kết quả tìm kiếm
            if (valueToCompare.toLowerCase().contains(keyword.toLowerCase())) {
                ketQuaTimKiem.add(benhNhan);
            }
        }
        
        return ketQuaTimKiem;
    }

    // Thêm phương thức để cập nhật bảng với kết quả tìm kiếm
    private void updateTableModelWithSearchResult(ArrayList<KhamBenh> ketQuaTimKiem) {
        // Xóa dữ liệu cũ
        while (tableModel.getRowCount() > 0) {
            tableModel.removeRow(0);
        }

        // Thêm dữ liệu mới từ kết quả tìm kiếm vào bảng
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        for (int i = 0; i < ketQuaTimKiem.size(); i++) {
            KhamBenh khambenh = ketQuaTimKiem.get(i);
            Object[] rowData = {
                i + 1,
                khambenh.getTen(),
                dateFormat.format(khambenh.getNgaySinh()),
                khambenh.getGioiTinh(),
                khambenh.getDiaChi(),
                khambenh.getSoDienThoai(),
                khambenh.getMaSoBHYT(),
                khambenh.getTenBenh(),
                khambenh.getTrieuChung(),
                khambenh.getThuocDieuTri(),
                khambenh.getVienPhi(),
                dateFormat.format(khambenh.getNgayKham()),
                khambenh.getBacSi()
            };
            tableModel.addRow(rowData);
        }

        // Hiển thị thông báo nếu không tìm thấy bệnh nhân phù hợp
        if (ketQuaTimKiem.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Không tìm thấy bệnh nhân phù hợp.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(giao_dien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(giao_dien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(giao_dien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(giao_dien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    //</editor-fold>

    /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // Kiểm tra đăng nhập ở đây
            dang_nhap dn = new dang_nhap();
            dn.setVisible(true); // Hiển thị giao diện đăng nhập
            dn.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
            dn.setGiaoDien(new giao_dien()); // Truyền tham chiếu của giao_dien vào dang_nhap   
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDangXuat;
    private javax.swing.JButton btnHuy;
    private javax.swing.JButton btnLuu;
    private javax.swing.JButton btnSapXep;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThoat;
    private javax.swing.JButton btnTim;
    private javax.swing.JButton btnXoa;
    private javax.swing.JComboBox<String> cboGioiTinh;
    private javax.swing.JComboBox<String> cboSapXep;
    private javax.swing.JComboBox<String> cboTim;
    private com.toedter.calendar.JDateChooser jDateNgayKham;
    private com.toedter.calendar.JDateChooser jDateNgaySinh;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBacSi;
    private javax.swing.JLabel lblDiaChi;
    private javax.swing.JLabel lblGioiTinh;
    private javax.swing.JLabel lblMaSoBHYT;
    private javax.swing.JLabel lblNgayKham;
    private javax.swing.JLabel lblNgaySinh;
    private javax.swing.JLabel lblQuanLy;
    private javax.swing.JLabel lblSapXep;
    private javax.swing.JLabel lblSoDienThoai;
    private javax.swing.JLabel lblTen;
    private javax.swing.JLabel lblTenBenh;
    private javax.swing.JLabel lblThuocDieuTri;
    private javax.swing.JLabel lblTim;
    private javax.swing.JLabel lblTrieuChung;
    private javax.swing.JLabel lblVienPhi;
    private javax.swing.JTable table;
    private javax.swing.JTextField txtBacSi;
    private javax.swing.JTextField txtDiaChi;
    private javax.swing.JTextField txtMaSoBHYT;
    private javax.swing.JTextField txtSoDienThoai;
    private javax.swing.JTextField txtTen;
    private javax.swing.JTextField txtTenBenh;
    private javax.swing.JTextField txtThuocDieuTri;
    private javax.swing.JTextField txtTim;
    private javax.swing.JTextField txtTrieuChung;
    private javax.swing.JTextField txtVienPhi;
    // End of variables declaration//GEN-END:variables
}